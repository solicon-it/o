import pandas as pd
from datetime import datetime

from . import _base_class

# To access "app.py" ...
import sys
import os

# getting the name of the directory where the this file is present.
current = os.path.dirname(os.path.realpath(__file__))

# Getting the parent directory name where the current directory is present.
parent = os.path.dirname(current)
sys.path.append(parent)

from app import g_VERSION


def sqlStmt():
    return """
with OBJ as (
  select owner
 ,decode(object_type, 'PACKAGE', 'PACKAGE_SPEC',
                      'PACKAGE BODY', 'PACKAGE_BODY',
                      'TYPE BODY', 'TYPE_BODY',
                      'DATABASE LINK', 'DB_LINK',
         object_type) type
 ,object_name name
from dba_objects
)
select * from OBJ
where 1=1
  {}
order by {}
"""

def filename_from_dbobject(dbname, row):
    home_dir = os.path.expanduser("~")
    return f"{home_dir}/tmp/{dbname}.{row[0]}.{row[1]}.{row[2]}.sql"

def beautify_src(dbname, objtype, src):
    iso_format = datetime.now().strftime('%Y-%m-%d %H:%M')

    headline = f"-- {iso_format} - generated by \"o\" (v{g_VERSION})"
    output = headline + '\n' + src.strip()

    # see https://docs.oracle.com/en/database/oracle/oracle-database/19/arpls/DBMS_METADATA.html#GUID-8C41AC89-D65A-4C5D-BF63-21F4B2FF720D
    # "Table 107-12 DBMS_METADATA: Object Types" contains all vaild type names.
    if objtype in ['PACKAGE_SPEC', 'PACKAGE_BODY', 'FUNCTION', 'PROCEDURE', 'TYPE', 'TYPE_BODY']:
        output = output + "\n/"
    else:
        output = output + "\n;"

    return output


class src(_base_class.OraCommand):

    def __init__(self, ctx):
        super().__init__(ctx)
        self.cols = ['OWNER', 'TYPE', 'NAME']

    def execute(self):
        super().checkColNames(self.ctx.filterExpr)

        predicateString = super().predicateExpr(
            super().adjustCase_forColumnValues(self.ctx.filterExpr, ['OSUSER', 'MACHINE']))
        SQL = sqlStmt().format(predicateString, super().sortExpr(self.ctx.sortExpr))
        super().printSQL(SQL)

        self.ctx.session.openConnection()
        dbname = self.ctx.session.database.name
        df = pd.read_sql(SQL, con=self.ctx.session.connection)
        df['filename'] = 'x'
        for index, row in df.iterrows():
            rs = self.ctx.session.connection.execute(f"select DBMS_METADATA.GET_DDL('{row[1]}', '{row[2]}', '{row[0]}') src from dual")
            fname = filename_from_dbobject(dbname, row)
            for rec in rs:
                with open(fname, 'w') as f:
                    f.write(beautify_src(dbname, row[1], rec.src))
            df.at[index, 'filename'] = fname

        return df
